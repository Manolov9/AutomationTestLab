<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="5" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-01-07T11:23:02Z" name="TC_001" finished-at="2020-01-07T11:23:08Z" duration-ms="6169">
    <groups>
    </groups>
    <test started-at="2020-01-07T11:23:02Z" name="TC_01_Freebet" finished-at="2020-01-07T11:23:08Z" duration-ms="6169">
      <class name="com.test.TC_01_Fly">
        <test-method is-config="true" signature="cleanTestData()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:22:59Z" name="cleanTestData" finished-at="2020-01-07T11:22:59Z" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanTestData -->
        <test-method is-config="true" signature="getEnvironmentConfiguration(java.lang.String)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:22:59Z" name="getEnvironmentConfiguration" finished-at="2020-01-07T11:22:59Z" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[fly]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getEnvironmentConfiguration -->
        <test-method is-config="true" signature="setup(java.lang.String)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:22:59Z" name="setup" finished-at="2020-01-07T11:23:02Z" duration-ms="3158" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="accessToken(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:02Z" name="accessToken" finished-at="2020-01-07T11:23:03Z" duration-ms="1316" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_01_Fly.accessToken(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- accessToken -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:03Z" name="report" finished-at="2020-01-07T11:23:03Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=accessToken status=SUCCESS method=TC_01_Fly.accessToken(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method signature="newUser(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:03Z" name="newUser" finished-at="2020-01-07T11:23:03Z" duration-ms="397" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_01_Fly.newUser(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at com.scripts.fly.RegisterUser.getNewUser(RegisterUser.java:86)
at com.test.TC_01_Fly.newUser(TC_01_Fly.java:29)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newUser -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:03Z" name="report" finished-at="2020-01-07T11:23:03Z" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=newUser status=FAILURE method=TC_01_Fly.newUser(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method signature="login(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:03Z" name="login" finished-at="2020-01-07T11:23:04Z" duration-ms="478" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_01_Fly.login(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:04Z" name="report" finished-at="2020-01-07T11:23:04Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=TC_01_Fly.login(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method signature="userInfo(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:04Z" name="userInfo" finished-at="2020-01-07T11:23:04Z" duration-ms="429" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_01_Fly.userInfo(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userInfo -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:04Z" name="report" finished-at="2020-01-07T11:23:04Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userInfo status=SUCCESS method=TC_01_Fly.userInfo(java.lang.reflect.Method)[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method signature="elementExist()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:04Z" name="elementExist" finished-at="2020-01-07T11:23:05Z" duration-ms="1008" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- elementExist -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:05Z" name="report" finished-at="2020-01-07T11:23:05Z" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=elementExist status=SUCCESS method=TC_01_Fly.elementExist()[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method signature="record()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:05Z" name="record" finished-at="2020-01-07T11:23:06Z" duration-ms="844" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- record -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:06Z" name="report" finished-at="2020-01-07T11:23:06Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=record status=SUCCESS method=TC_01_Fly.record()[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method signature="hyperlinks()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:06Z" name="hyperlinks" finished-at="2020-01-07T11:23:07Z" duration-ms="833" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at com.front_end.GetAllLinks.allLinks(GetAllLinks.java:49)
at com.test.TC_01_Fly.hyperlinks(TC_01_Fly.java:56)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hyperlinks -->
        <test-method is-config="true" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:07Z" name="report" finished-at="2020-01-07T11:23:07Z" duration-ms="373" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=hyperlinks status=FAILURE method=TC_01_Fly.hyperlinks()[pri:0, instance:com.test.TC_01_Fly@77825085] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:07Z" name="endReport" finished-at="2020-01-07T11:23:08Z" duration-ms="417" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method is-config="true" signature="clearXml()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:08Z" name="clearXml" finished-at="2020-01-07T11:23:08Z" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clearXml -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.test.TC_01_Fly@77825085]" started-at="2020-01-07T11:23:08Z" name="tearDown" finished-at="2020-01-07T11:23:09Z" depends-on-methods="com.setup.BasicSetup.clearXml" duration-ms="598" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.test.TC_01_Fly -->
    </test> <!-- TC_01_Freebet -->
  </suite> <!-- TC_001 -->
</testng-results>
