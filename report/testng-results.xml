<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="9" total="13" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="TC_001" duration-ms="2596" started-at="2019-07-09T15:54:15Z" finished-at="2019-07-09T15:54:18Z">
    <groups>
    </groups>
    <test name="TC_01_Example" duration-ms="2596" started-at="2019-07-09T15:54:15Z" finished-at="2019-07-09T15:54:18Z">
      <class name="com.test.TC_04_AmelcoAPI.ID_04_PlaceBet">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_04_PlaceBet@43301423]" name="startTest" is-config="true" duration-ms="0" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_04_PlaceBet@43301423]" name="report" is-config="true" duration-ms="3" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=placeBet status=FAILURE method=ID_04_PlaceBet.placeBet(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_04_PlaceBet@43301423] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method status="FAIL" signature="placeBet(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_04_PlaceBet@43301423]" name="placeBet" duration-ms="0" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_04_AmelcoAPI.ID_04_PlaceBet.placeBet(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Parameter specified as non-null is null: method okhttp3.FormBody$Builder.add, parameter value]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Parameter specified as non-null is null: method okhttp3.FormBody$Builder.add, parameter value
at okhttp3.FormBody$Builder.add(FormBody.kt)
at com.test.TC_04_AmelcoAPI.ID_04_PlaceBet.placeBet(ID_04_PlaceBet.java:56)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- placeBet -->
      </class> <!-- com.test.TC_04_AmelcoAPI.ID_04_PlaceBet -->
      <class name="com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets@3c9d0b9d]" name="startTest" is-config="true" duration-ms="1" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="FAIL" signature="getOpenBets(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets@3c9d0b9d]" name="getOpenBets" duration-ms="0" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets.getOpenBets(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Parameter specified as non-null is null: method okhttp3.FormBody$Builder.add, parameter value]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Parameter specified as non-null is null: method okhttp3.FormBody$Builder.add, parameter value
at okhttp3.FormBody$Builder.add(FormBody.kt)
at com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets.getOpenBets(ID_03_GetOpenBets.java:62)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOpenBets -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets@3c9d0b9d]" name="report" is-config="true" duration-ms="96" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOpenBets status=FAILURE method=ID_03_GetOpenBets.getOpenBets(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets@3c9d0b9d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.TC_04_AmelcoAPI.ID_03_GetOpenBets -->
      <class name="com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin@6dbb137d]" name="startTest" is-config="true" duration-ms="1" started-at="2019-07-09T15:54:17Z" finished-at="2019-07-09T15:54:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="FAIL" signature="externalLogin(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin@6dbb137d]" name="externalLogin" duration-ms="476" started-at="2019-07-09T15:54:17Z" finished-at="2019-07-09T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin.externalLogin(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="com.jayway.jsonpath.PathNotFoundException">
            <message>
              <![CDATA[Missing property in path $['Login']]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.jayway.jsonpath.PathNotFoundException: Missing property in path $['Login']
at com.jayway.jsonpath.internal.path.PathToken.handleObjectProperty(PathToken.java:72)
at com.jayway.jsonpath.internal.path.PropertyPathToken.evaluate(PropertyPathToken.java:79)
at com.jayway.jsonpath.internal.path.RootPathToken.evaluate(RootPathToken.java:62)
at com.jayway.jsonpath.internal.path.CompiledPath.evaluate(CompiledPath.java:53)
at com.jayway.jsonpath.internal.path.CompiledPath.evaluate(CompiledPath.java:61)
at com.jayway.jsonpath.JsonPath.read(JsonPath.java:187)
at com.jayway.jsonpath.internal.JsonContext.read(JsonContext.java:102)
at com.jayway.jsonpath.internal.JsonContext.read(JsonContext.java:89)
at com.jayway.jsonpath.JsonPath.read(JsonPath.java:502)
at com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin.externalLogin(ID_02_ExternalLogin.java:98)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- com.jayway.jsonpath.PathNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- externalLogin -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin@6dbb137d]" name="report" is-config="true" duration-ms="6" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=externalLogin status=FAILURE method=ID_02_ExternalLogin.externalLogin(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin@6dbb137d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.TC_04_AmelcoAPI.ID_02_ExternalLogin -->
      <class name="com.test.TC_04_AmelcoAPI.ID_01_LogIn">
        <test-method status="PASS" signature="setup(java.lang.String)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8]" name="setup" is-config="true" duration-ms="1414" started-at="2019-07-09T15:54:14Z" finished-at="2019-07-09T15:54:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[safari]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8]" name="startTest" is-config="true" duration-ms="100" started-at="2019-07-09T15:54:15Z" finished-at="2019-07-09T15:54:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="loginRam(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8]" name="loginRam" duration-ms="1869" started-at="2019-07-09T15:54:15Z" finished-at="2019-07-09T15:54:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.TC_04_AmelcoAPI.ID_01_LogIn.loginRam(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginRam -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8]" name="report" is-config="true" duration-ms="32" started-at="2019-07-09T15:54:17Z" finished-at="2019-07-09T15:54:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginRam status=SUCCESS method=ID_01_LogIn.loginRam(java.lang.reflect.Method)[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method status="PASS" signature="clearXml()[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8]" name="clearXml" is-config="true" duration-ms="1" started-at="2019-07-09T15:54:18Z" finished-at="2019-07-09T15:54:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clearXml -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.test.TC_04_AmelcoAPI.ID_01_LogIn@318ba8c8]" name="tearDown" is-config="true" duration-ms="381" started-at="2019-07-09T15:54:18Z" depends-on-methods="com.setup.BasicSetup.clearXml" finished-at="2019-07-09T15:54:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.test.TC_04_AmelcoAPI.ID_01_LogIn -->
    </test> <!-- TC_01_Example -->
  </suite> <!-- TC_001 -->
</testng-results>
