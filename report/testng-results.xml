<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="4" ignored="28" total="39" passed="7">
  <reporter-output>
  </reporter-output>
  <suite name="TC_001" duration-ms="33910" started-at="2019-07-26T15:00:47Z" finished-at="2019-07-26T15:01:21Z">
    <groups>
    </groups>
    <test name="TC_01_Example" duration-ms="33910" started-at="2019-07-26T15:00:47Z" finished-at="2019-07-26T15:01:21Z">
      <class name="com.test.uat.TC_01_Bet.ID_04_PlaceBet">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_04_PlaceBet@c933ea7d]" name="startTest" is-config="true" duration-ms="0" started-at="2019-07-26T15:00:52Z" finished-at="2019-07-26T15:00:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="FAIL" signature="placeBet(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_04_PlaceBet@c933ea7d]" name="placeBet" duration-ms="449" started-at="2019-07-26T15:00:52Z" finished-at="2019-07-26T15:00:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_04_PlaceBet.placeBet(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="com.jayway.jsonpath.PathNotFoundException">
            <message>
              <![CDATA[Missing property in path $['PlaceBetsResponse']]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.jayway.jsonpath.PathNotFoundException: Missing property in path $['PlaceBetsResponse']
at com.jayway.jsonpath.internal.path.PathToken.handleObjectProperty(PathToken.java:72)
at com.jayway.jsonpath.internal.path.PropertyPathToken.evaluate(PropertyPathToken.java:79)
at com.jayway.jsonpath.internal.path.RootPathToken.evaluate(RootPathToken.java:62)
at com.jayway.jsonpath.internal.path.CompiledPath.evaluate(CompiledPath.java:53)
at com.jayway.jsonpath.internal.path.CompiledPath.evaluate(CompiledPath.java:61)
at com.jayway.jsonpath.JsonPath.read(JsonPath.java:187)
at com.jayway.jsonpath.internal.JsonContext.read(JsonContext.java:102)
at com.jayway.jsonpath.internal.JsonContext.read(JsonContext.java:89)
at com.jayway.jsonpath.JsonPath.read(JsonPath.java:488)
at com.test.uat.TC_01_Bet.ID_04_PlaceBet.placeBet(ID_04_PlaceBet.java:115)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:813)
]]>
            </full-stacktrace>
          </exception> <!-- com.jayway.jsonpath.PathNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- placeBet -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_04_PlaceBet@c933ea7d]" name="report" is-config="true" duration-ms="4" started-at="2019-07-26T15:00:52Z" finished-at="2019-07-26T15:00:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=placeBet status=FAILURE method=ID_04_PlaceBet.placeBet(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_04_PlaceBet@c933ea7d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_04_PlaceBet -->
      <class name="com.test.uat.TC_02_Sumo.UI.ID_01_Promotions">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="startTest" is-config="true" duration-ms="1" started-at="2019-07-26T15:01:08Z" finished-at="2019-07-26T15:01:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="openSumoHomePage()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="openSumoHomePage" duration-ms="3049" started-at="2019-07-26T15:01:08Z" finished-at="2019-07-26T15:01:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openSumoHomePage -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="report" is-config="true" duration-ms="1" started-at="2019-07-26T15:01:11Z" finished-at="2019-07-26T15:01:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=openSumoHomePage status=SUCCESS method=ID_01_Promotions.openSumoHomePage()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method status="PASS" signature="noSelectionBtnState(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="noSelectionBtnState" duration-ms="6486" started-at="2019-07-26T15:01:11Z" finished-at="2019-07-26T15:01:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_02_Sumo.UI.ID_01_Promotions.noSelectionBtnState(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- noSelectionBtnState -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="report" is-config="true" duration-ms="1" started-at="2019-07-26T15:01:18Z" finished-at="2019-07-26T15:01:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=noSelectionBtnState status=SUCCESS method=ID_01_Promotions.noSelectionBtnState(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method status="PASS" signature="selectionBtnState()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="selectionBtnState" duration-ms="2645" started-at="2019-07-26T15:01:18Z" finished-at="2019-07-26T15:01:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- selectionBtnState -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="report" is-config="true" duration-ms="1" started-at="2019-07-26T15:01:21Z" finished-at="2019-07-26T15:01:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=selectionBtnState status=SUCCESS method=ID_01_Promotions.selectionBtnState()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method status="PASS" signature="checkTable()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="checkTable" duration-ms="185" started-at="2019-07-26T15:01:21Z" finished-at="2019-07-26T15:01:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkTable -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f]" name="report" is-config="true" duration-ms="1" started-at="2019-07-26T15:01:21Z" finished-at="2019-07-26T15:01:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkTable status=SUCCESS method=ID_01_Promotions.checkTable()[pri:0, instance:com.test.uat.TC_02_Sumo.UI.ID_01_Promotions@a217285f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_02_Sumo.UI.ID_01_Promotions -->
      <class name="com.test.uat.TC_01_Bet.ID_05_GetBetStatus">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_05_GetBetStatus@75f571b]" name="startTest" is-config="true" duration-ms="0" started-at="2019-07-26T15:00:52Z" finished-at="2019-07-26T15:00:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="getBetStatus(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_05_GetBetStatus@75f571b]" name="getBetStatus" duration-ms="695" started-at="2019-07-26T15:00:52Z" finished-at="2019-07-26T15:00:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_05_GetBetStatus.getBetStatus(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBetStatus -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_05_GetBetStatus@75f571b]" name="report" is-config="true" duration-ms="1" started-at="2019-07-26T15:00:53Z" finished-at="2019-07-26T15:00:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getBetStatus status=SUCCESS method=ID_05_GetBetStatus.getBetStatus(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_05_GetBetStatus@75f571b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_05_GetBetStatus -->
      <class name="com.test.uat.TC_01_Bet.ID_01_LogIn">
        <test-method status="PASS" signature="cleanResponseData()[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="cleanResponseData" is-config="true" duration-ms="10" started-at="2019-07-26T15:00:45Z" finished-at="2019-07-26T15:00:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanResponseData -->
        <test-method status="PASS" signature="setup(java.lang.String)[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="setup" is-config="true" duration-ms="1917" started-at="2019-07-26T15:00:45Z" finished-at="2019-07-26T15:00:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="startTest" is-config="true" duration-ms="110" started-at="2019-07-26T15:00:47Z" finished-at="2019-07-26T15:00:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="loginRam(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="loginRam" duration-ms="1838" started-at="2019-07-26T15:00:47Z" finished-at="2019-07-26T15:00:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_01_LogIn.loginRam(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginRam -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="report" is-config="true" duration-ms="37" started-at="2019-07-26T15:00:49Z" finished-at="2019-07-26T15:00:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginRam status=SUCCESS method=ID_01_LogIn.loginRam(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="tearDown" is-config="true" duration-ms="526" started-at="2019-07-26T15:01:21Z" depends-on-methods="com.setup.BasicSetup.clearXml" finished-at="2019-07-26T15:01:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="clearXml()[pri:0, instance:com.test.uat.TC_01_Bet.ID_01_LogIn@41b22941]" name="clearXml" is-config="true" duration-ms="0" started-at="2019-07-26T15:01:21Z" finished-at="2019-07-26T15:01:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clearXml -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_01_LogIn -->
      <class name="com.test.uat.TC_01_Bet.ID_07_Cashout">
        <test-method status="FAIL" signature="betCashout(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_07_Cashout@ba88a6f1]" name="betCashout" duration-ms="1" started-at="2019-07-26T15:00:53Z" finished-at="2019-07-26T15:00:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_07_Cashout.betCashout(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Parameter specified as non-null is null: method okhttp3.FormBody$Builder.add, parameter value]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Parameter specified as non-null is null: method okhttp3.FormBody$Builder.add, parameter value
at okhttp3.FormBody$Builder.add(FormBody.kt)
at com.test.uat.TC_01_Bet.ID_07_Cashout.betCashout(ID_07_Cashout.java:54)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:813)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- betCashout -->
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_07_Cashout@ba88a6f1]" name="startTest" is-config="true" duration-ms="0" started-at="2019-07-26T15:00:53Z" finished-at="2019-07-26T15:00:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_07_Cashout@ba88a6f1]" name="report" is-config="true" duration-ms="295" started-at="2019-07-26T15:00:53Z" finished-at="2019-07-26T15:00:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=betCashout status=FAILURE method=ID_07_Cashout.betCashout(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_07_Cashout@ba88a6f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_07_Cashout -->
      <class name="com.test.uat.TC_01_Bet.ID_08_GetSportsTree">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_08_GetSportsTree@8c74e1a9]" name="startTest" is-config="true" duration-ms="0" started-at="2019-07-26T15:00:53Z" finished-at="2019-07-26T15:00:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="FAIL" signature="getSportsTree(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_08_GetSportsTree@8c74e1a9]" name="getSportsTree" duration-ms="15006" started-at="2019-07-26T15:00:53Z" finished-at="2019-07-26T15:01:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_08_GetSportsTree.getSportsTree(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.io.InterruptedIOException">
            <message>
              <![CDATA[timeout]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.io.InterruptedIOException: timeout
at okhttp3.internal.connection.Transmitter.timeoutExit(Transmitter.kt:104)
at okhttp3.internal.connection.Transmitter.maybeReleaseConnection(Transmitter.kt:293)
at okhttp3.internal.connection.Transmitter.noMoreExchanges(Transmitter.kt:257)
at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.kt:192)
at okhttp3.RealCall.execute(RealCall.kt:66)
at com.setup.OkHttpClientUtils.okClientRequest(OkHttpClientUtils.java:49)
at com.test.uat.TC_01_Bet.ID_08_GetSportsTree.getSportsTree(ID_08_GetSportsTree.java:73)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:813)
Caused by: java.net.SocketException: Socket closed
at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
at java.net.SocketInputStream.read(SocketInputStream.java:171)
at java.net.SocketInputStream.read(SocketInputStream.java:141)
at sun.security.ssl.InputRecord.readFully(InputRecord.java:465)
at sun.security.ssl.InputRecord.read(InputRecord.java:503)
at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:975)
at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:933)
at sun.security.ssl.AppInputStream.read(AppInputStream.java:105)
at okio.InputStreamSource.read(Okio.kt:102)
at okio.AsyncTimeout$source$1.read(AsyncTimeout.kt:159)
at okio.RealBufferedSource.indexOf(RealBufferedSource.kt:349)
at okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.kt:222)
at okhttp3.internal.http1.Http1ExchangeCodec.readHeaderLine(Http1ExchangeCodec.kt:210)
at okhttp3.internal.http1.Http1ExchangeCodec.readResponseHeaders(Http1ExchangeCodec.kt:181)
at okhttp3.internal.connection.Exchange.readResponseHeaders(Exchange.kt:105)
at okhttp3.internal.http.CallServerInterceptor.intercept(CallServerInterceptor.kt:82)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)
at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.kt:37)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)
at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.kt:82)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)
at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.kt:84)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)
at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.kt:71)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)
at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.kt:184)
... 23 more
]]>
            </full-stacktrace>
          </exception> <!-- java.io.InterruptedIOException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getSportsTree -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_08_GetSportsTree@8c74e1a9]" name="report" is-config="true" duration-ms="282" started-at="2019-07-26T15:01:08Z" finished-at="2019-07-26T15:01:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getSportsTree status=FAILURE method=ID_08_GetSportsTree.getSportsTree(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_08_GetSportsTree@8c74e1a9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_08_GetSportsTree -->
      <class name="com.test.uat.TC_01_Bet.ID_02_ExternalLogin">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_02_ExternalLogin@7060dca4]" name="startTest" is-config="true" duration-ms="0" started-at="2019-07-26T15:00:49Z" finished-at="2019-07-26T15:00:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="PASS" signature="externalLogin(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_02_ExternalLogin@7060dca4]" name="externalLogin" duration-ms="1060" started-at="2019-07-26T15:00:49Z" finished-at="2019-07-26T15:00:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_02_ExternalLogin.externalLogin(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- externalLogin -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_02_ExternalLogin@7060dca4]" name="report" is-config="true" duration-ms="3" started-at="2019-07-26T15:00:50Z" finished-at="2019-07-26T15:00:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=externalLogin status=SUCCESS method=ID_02_ExternalLogin.externalLogin(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_02_ExternalLogin@7060dca4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_02_ExternalLogin -->
      <class name="com.test.uat.TC_01_Bet.ID_03_GetOpenBets">
        <test-method status="PASS" signature="startTest()[pri:0, instance:com.test.uat.TC_01_Bet.ID_03_GetOpenBets@55f75cfc]" name="startTest" is-config="true" duration-ms="1" started-at="2019-07-26T15:00:50Z" finished-at="2019-07-26T15:00:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="FAIL" signature="getOpenBets(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_03_GetOpenBets@55f75cfc]" name="getOpenBets" duration-ms="1570" started-at="2019-07-26T15:00:50Z" finished-at="2019-07-26T15:00:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.test.uat.TC_01_Bet.ID_03_GetOpenBets.getOpenBets(java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.ClassCastException">
            <message>
              <![CDATA[java.lang.Double incompatible with java.lang.Long]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ClassCastException: java.lang.Double incompatible with java.lang.Long
at com.test.uat.TC_01_Bet.ID_03_GetOpenBets.getOpenBets(ID_03_GetOpenBets.java:110)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:813)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ClassCastException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOpenBets -->
        <test-method status="PASS" signature="report(org.testng.ITestResult)[pri:0, instance:com.test.uat.TC_01_Bet.ID_03_GetOpenBets@55f75cfc]" name="report" is-config="true" duration-ms="167" started-at="2019-07-26T15:00:52Z" finished-at="2019-07-26T15:00:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOpenBets status=FAILURE method=ID_03_GetOpenBets.getOpenBets(java.lang.reflect.Method)[pri:0, instance:com.test.uat.TC_01_Bet.ID_03_GetOpenBets@55f75cfc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- report -->
      </class> <!-- com.test.uat.TC_01_Bet.ID_03_GetOpenBets -->
    </test> <!-- TC_01_Example -->
  </suite> <!-- TC_001 -->
</testng-results>
